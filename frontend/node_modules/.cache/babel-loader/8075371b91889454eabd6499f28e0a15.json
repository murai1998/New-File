{"ast":null,"code":"var _jsxFileName = \"/Users/thatchampion/Desktop/Ironhack/Project4/frontend/src/components/Socket.js\";\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport Navbar from \"./navbar\";\nimport moment from \"moment\";\nconst socket = io(\"http://localhost:4000\", {\n  transports: [\"websocket\", \"polling\"]\n});\n\nfunction Socket(props) {\n  //   const username = props.user.user.username;\n  //   const [users, setUsers] = useState([]);\n  //   const [message, setMessage] = useState(\"\");\n  //   const [messages, setMessages] = useState([]);\n  //   useEffect(() => {\n  //     socket.on(\"connect\", async () => {\n  //       await socket.emit(\"username\", username);\n  //       console.log(\"userName\", username);\n  //     });\n  //     socket.on(\"users\", async users => {\n  //       await setUsers(users);\n  //       console.log(\"All users\", users);\n  //     });\n  //     socket.on(\"message\", async message => {\n  //       await setMessages(messages => [...messages, message]);\n  //     });\n  //     socket.on(\"connected\", async user => {\n  //       await setUsers(users => [...users, user]);\n  //     });\n  //     socket.on(\"disconnected\", async name => {\n  //       await setUsers(users => {\n  //         return users.filter(user => user.name !== name);\n  //       });\n  //     });\n  //   }, []);\n  //   const submit = event => {\n  //     event.preventDefault();\n  //     socket.emit(\"send\", message);\n  //     setMessage(\"\");\n  //   };\n  //   console.log(\"MESS\", messages);\n  //   return (\n  //     <div>\n  //       {\" \"}\n  //       <Navbar />\n  //       <div className=\"container\">\n  //         <div className=\"row\">\n  //           <div className=\"col-md-12 mt-4 mb-4\">\n  //             <h6>Hello {username}</h6>\n  //           </div>\n  //         </div>\n  //         <div className=\"row\">\n  //           <div className=\"col-md-8\">\n  //             <h6>Messages</h6>\n  //             <div id=\"messages\">\n  //               {messages.map(({ user, date, text }, index) => (\n  //                 <div key={index} className=\"row mb-2\">\n  //                   <div className=\"col-md-3\">\n  //                     {moment(date).format(\"h:mm:ss a\")}\n  //                   </div>\n  //                   {user !== undefined ? (\n  //                     <div className=\"col-md-2\">{user.name}</div>\n  //                   ) : (\n  //                     \"\"\n  //                   )}\n  //                   <div className=\"col-md-2\">{text}</div>\n  //                 </div>\n  //               ))}\n  //             </div>\n  //             <form onSubmit={submit} id=\"form\">\n  //               <div className=\"input-group\">\n  //                 <input\n  //                   type=\"text\"\n  //                   className=\"form-control\"\n  //                   onChange={e => setMessage(e.currentTarget.value)}\n  //                   value={message}\n  //                   id=\"text\"\n  //                 />\n  //                 <span className=\"input-group-btn\">\n  //                   <button id=\"submit\" type=\"submit\" className=\"btn btn-primary\">\n  //                     Send\n  //                   </button>\n  //                 </span>\n  //               </div>\n  //             </form>\n  //           </div>\n  //           <div className=\"col-md-4\">\n  //             <h6>Users</h6>\n  //             {console.log(users)}\n  //             <ul id=\"users\">\n  //               {users.map(({ name, id }) => (\n  //                 <li key={id}>{name}</li>\n  //               ))}\n  //             </ul>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   );\n  const [state, setState] = useState({\n    message: \"\",\n    name: props.user.user.username\n  });\n  const [chat, setChat] = useState([]);\n  useEffect(() => {\n    socket.on(\"message\", ({\n      name,\n      message\n    }) => {\n      setChat([...chat, {\n        name,\n        message\n      }]);\n    });\n  });\n\n  const onTextChange = e => {\n    setState({ ...state,\n      [e.target.name]: e.target.value\n    });\n  };\n\n  const onMessageSubmit = e => {\n    e.preventDefault();\n    const {\n      name,\n      message\n    } = state;\n    socket.emit(\"message\", {\n      name,\n      message\n    });\n    console.log(name, message);\n    setState({\n      message: \"\",\n      name\n    });\n  };\n\n  const renderChat = () => {\n    console.log(\"Name\", props.user.user.username);\n    return chat.map(({\n      name,\n      message\n    }, index) => /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }\n    }, name, \": \", /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 19\n      }\n    }, message))));\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }), \"props.user.user.username\", /*#__PURE__*/React.createElement(\"div\", {\n    className: \"card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onMessageSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"Messanger\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"render-chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 13\n    }\n  }, \"Chat Log\"), renderChat()), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  }, \"Active users\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    name: \"message\",\n    onChange: e => onTextChange(e),\n    value: state.message,\n    variant: \"outlined\",\n    label: \"Message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }, \"Send Message\"))));\n}\n\nexport default Socket;","map":{"version":3,"sources":["/Users/thatchampion/Desktop/Ironhack/Project4/frontend/src/components/Socket.js"],"names":["React","useState","useEffect","io","Navbar","moment","socket","transports","Socket","props","state","setState","message","name","user","username","chat","setChat","on","onTextChange","e","target","value","onMessageSubmit","preventDefault","emit","console","log","renderChat","map","index"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport Navbar from \"./navbar\";\n\nimport moment from \"moment\";\n\nconst socket = io(\"http://localhost:4000\", {\n  transports: [\"websocket\", \"polling\"]\n});\nfunction Socket(props) {\n  //   const username = props.user.user.username;\n\n  //   const [users, setUsers] = useState([]);\n  //   const [message, setMessage] = useState(\"\");\n  //   const [messages, setMessages] = useState([]);\n\n  //   useEffect(() => {\n  //     socket.on(\"connect\", async () => {\n  //       await socket.emit(\"username\", username);\n  //       console.log(\"userName\", username);\n  //     });\n\n  //     socket.on(\"users\", async users => {\n  //       await setUsers(users);\n  //       console.log(\"All users\", users);\n  //     });\n\n  //     socket.on(\"message\", async message => {\n  //       await setMessages(messages => [...messages, message]);\n  //     });\n\n  //     socket.on(\"connected\", async user => {\n  //       await setUsers(users => [...users, user]);\n  //     });\n\n  //     socket.on(\"disconnected\", async name => {\n  //       await setUsers(users => {\n  //         return users.filter(user => user.name !== name);\n  //       });\n  //     });\n  //   }, []);\n\n  //   const submit = event => {\n  //     event.preventDefault();\n  //     socket.emit(\"send\", message);\n  //     setMessage(\"\");\n  //   };\n  //   console.log(\"MESS\", messages);\n  //   return (\n  //     <div>\n  //       {\" \"}\n  //       <Navbar />\n  //       <div className=\"container\">\n  //         <div className=\"row\">\n  //           <div className=\"col-md-12 mt-4 mb-4\">\n  //             <h6>Hello {username}</h6>\n  //           </div>\n  //         </div>\n  //         <div className=\"row\">\n  //           <div className=\"col-md-8\">\n  //             <h6>Messages</h6>\n\n  //             <div id=\"messages\">\n  //               {messages.map(({ user, date, text }, index) => (\n  //                 <div key={index} className=\"row mb-2\">\n  //                   <div className=\"col-md-3\">\n  //                     {moment(date).format(\"h:mm:ss a\")}\n  //                   </div>\n  //                   {user !== undefined ? (\n  //                     <div className=\"col-md-2\">{user.name}</div>\n  //                   ) : (\n  //                     \"\"\n  //                   )}\n\n  //                   <div className=\"col-md-2\">{text}</div>\n  //                 </div>\n  //               ))}\n  //             </div>\n  //             <form onSubmit={submit} id=\"form\">\n  //               <div className=\"input-group\">\n  //                 <input\n  //                   type=\"text\"\n  //                   className=\"form-control\"\n  //                   onChange={e => setMessage(e.currentTarget.value)}\n  //                   value={message}\n  //                   id=\"text\"\n  //                 />\n  //                 <span className=\"input-group-btn\">\n  //                   <button id=\"submit\" type=\"submit\" className=\"btn btn-primary\">\n  //                     Send\n  //                   </button>\n  //                 </span>\n  //               </div>\n  //             </form>\n  //           </div>\n  //           <div className=\"col-md-4\">\n  //             <h6>Users</h6>\n  //             {console.log(users)}\n  //             <ul id=\"users\">\n  //               {users.map(({ name, id }) => (\n  //                 <li key={id}>{name}</li>\n  //               ))}\n  //             </ul>\n  //           </div>\n  //         </div>\n  //       </div>\n  //     </div>\n  //   );\n\n  const [state, setState] = useState({\n    message: \"\",\n    name: props.user.user.username\n  });\n  const [chat, setChat] = useState([]);\n\n  useEffect(() => {\n    socket.on(\"message\", ({ name, message }) => {\n      setChat([...chat, { name, message }]);\n    });\n  });\n\n  const onTextChange = e => {\n    setState({ ...state, [e.target.name]: e.target.value });\n  };\n\n  const onMessageSubmit = e => {\n    e.preventDefault();\n    const { name, message } = state;\n    socket.emit(\"message\", { name, message });\n    console.log(name, message);\n    setState({ message: \"\", name });\n  };\n\n  const renderChat = () => {\n    console.log(\"Name\", props.user.user.username);\n    return chat.map(({ name, message }, index) => (\n      <div key={index}>\n        <h3>\n          {name}: <span>{message}</span>\n        </h3>\n      </div>\n    ));\n  };\n\n  return (\n    <div>\n      <Navbar />\n      props.user.user.username\n      <div className=\"card\">\n        <form onSubmit={onMessageSubmit}>\n          <h1>Messanger</h1>\n          <div className=\"render-chat\">\n            <h1>Chat Log</h1>\n            {renderChat()}\n          </div>\n\n          <div>\n            <h2>Active users</h2>\n            <p></p>\n          </div>\n          <div>\n            <textarea\n              name=\"message\"\n              onChange={e => onTextChange(e)}\n              value={state.message}\n              variant=\"outlined\"\n              label=\"Message\"\n            />\n          </div>\n          <button>Send Message</button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}