{"ast":null,"code":"const usage = require('./apis/usage.js');\n\nconst sentiment = require('./apis/sentiment.js');\n\nconst sentimentBatch = require('./apis/sentimentBatch.js');\n\nconst target_sentiment = require('./apis/target_sentiment.js');\n\nconst target_sentimentBatch = require('./apis/target_sentimentBatch.js');\n\nconst sarcasm = require('./apis/sarcasm.js');\n\nconst sarcasmBatch = require('./apis/sarcasmBatch.js');\n\nconst abuse = require('./apis/abuse.js');\n\nconst abuseBatch = require('./apis/abuseBatch.js');\n\nconst semantic = require('./apis/semantic.js');\n\nconst ner = require('./apis/ner.js');\n\nconst nerBatch = require('./apis/nerBatch.js');\n\nconst emotion = require('./apis/emotion.js');\n\nconst emotionBatch = require('./apis/emotionBatch.js');\n\nconst intent = require('./apis/intent.js');\n\nconst intentBatch = require('./apis/intentBatch.js');\n\nconst keywords = require('./apis/keywords.js');\n\nconst keywordsBatch = require('./apis/keywordsBatch.js');\n\nconst mulitlangKeywords = require('./apis/multilangKeywords.js');\n\nconst taxonomy = require('./apis/taxonomy.js');\n\nconst taxonomyBatch = require('./apis/taxonomyBatch.js');\n\nconst multilingualSentiment = require('./apis/multilingualSentiment.js');\n\nconst customClassifier = require('./apis/customClassifier.js');\n\nconst textParser = require('./apis/textParser.js');\n\nconst phraseExtractor = require('./apis/phraseExtractor.js');\n\nconst phraseExtractorBatch = require('./apis/phraseExtractorBatch.js');\n\nconst languageDetection = require('./apis/languageDetection.js');\n\nconst languageDetectionBatch = require('./apis/languageDetectionBatch.js');\n\nconst popularity = require('./apis/popularity.js');\n\nconst nsfw = require('./apis/nsfw.js');\n\nconst facialEmotion = require('./apis/facialEmotion.js');\n\nconst objectRecognizer = require('./apis/objectRecognizer.js');\n\nlet paralleldots = {\n  apiKey: undefined,\n  usage: function () {\n    return usage(this.apiKey);\n  },\n  sentiment: function (text, lang_code = 'en') {\n    return sentiment(text, lang_code, this.apiKey);\n  },\n  sentimentBatch: function (text, lang_code = 'en') {\n    return sentimentBatch(text, lang_code, this.apiKey);\n  },\n  target_sentiment: function (text, entity) {\n    return target_sentiment(text, this.apiKey, entity);\n  },\n  target_sentimentBatch: function (text, entity) {\n    return target_sentimentBatch(text, this.apiKey, entity);\n  },\n  sarcasm: function (text, lang_code = \"en\") {\n    return sarcasm(text, lang_code, this.apiKey);\n  },\n  sarcasmBatch: function (text, lang_code = \"en\") {\n    return sarcasmBatch(text, lang_code, this.apiKey);\n  },\n  abuse: function (text) {\n    return abuse(text, this.apiKey);\n  },\n  abuseBatch: function (text) {\n    return abuseBatch(text, this.apiKey);\n  },\n  semantic: function (text1, text2) {\n    return semantic(text1, text2, this.apiKey);\n  },\n  ner: function (text, lang_code = \"en\") {\n    return ner(text, lang_code, this.apiKey);\n  },\n  nerBatch: function (text, lang_code = \"en\") {\n    return nerBatch(text, lang_code, this.apiKey);\n  },\n  emotion: function (text, lang_code = \"en\") {\n    return emotion(text, lang_code, this.apiKey);\n  },\n  emotionBatch: function (text, lang_code = \"en\") {\n    return emotionBatch(text, lang_code, this.apiKey);\n  },\n  intent: function (text) {\n    return intent(text, this.apiKey);\n  },\n  intentBatch: function (text) {\n    return intentBatch(text, this.apiKey);\n  },\n  keywords: function (text) {\n    return keywords(text, this.apiKey);\n  },\n  keywordsBatch: function (text) {\n    return keywordsBatch(text, this.apiKey);\n  },\n  multilangKeywords: function (text, lang_code = \"en\") {\n    return mulitlangKeywords(text, lang_code, this.apiKey);\n  },\n  taxonomy: function (text) {\n    return taxonomy(text, this.apiKey);\n  },\n  taxonomyBatch: function (text) {\n    return taxonomyBatch(text, this.apiKey);\n  },\n  multilingualSentiment: function (text, code) {\n    return multilingualSentiment(text, code, this.apiKey);\n  },\n  customClassifier: function (text, category) {\n    return customClassifier(text, category, this.apiKey);\n  },\n  textParser: function (text) {\n    return textParser(text, this.apiKey);\n  },\n  phraseExtractor: function (text) {\n    return phraseExtractor(text, this.apiKey);\n  },\n  phraseExtractorBatch: function (text) {\n    return phraseExtractorBatch(text, this.apiKey);\n  },\n  languageDetection: function (text) {\n    return languageDetection(text, this.apiKey);\n  },\n  languageDetectionBatch: function (text) {\n    return languageDetectionBatch(text, this.apiKey);\n  },\n  popularity: function (file_path, type) {\n    return popularity(file_path, type, this.apiKey);\n  },\n  nsfw: function (file_path, type) {\n    return nsfw(file_path, type, this.apiKey);\n  },\n  facialEmotion: function (file_path, type) {\n    return facialEmotion(file_path, type, this.apiKey);\n  },\n  objectRecognizer: function (file_path, type) {\n    return objectRecognizer(file_path, type, this.apiKey);\n  }\n};\nmodule.exports = paralleldots;","map":{"version":3,"sources":["/Users/thatchampion/Desktop/Ironhack/Project4/node_modules/paralleldots/paralleldots.js"],"names":["usage","require","sentiment","sentimentBatch","target_sentiment","target_sentimentBatch","sarcasm","sarcasmBatch","abuse","abuseBatch","semantic","ner","nerBatch","emotion","emotionBatch","intent","intentBatch","keywords","keywordsBatch","mulitlangKeywords","taxonomy","taxonomyBatch","multilingualSentiment","customClassifier","textParser","phraseExtractor","phraseExtractorBatch","languageDetection","languageDetectionBatch","popularity","nsfw","facialEmotion","objectRecognizer","paralleldots","apiKey","undefined","text","lang_code","entity","text1","text2","multilangKeywords","code","category","file_path","type","module","exports"],"mappings":"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","sourcesContent":["const usage = require('./apis/usage.js');\nconst sentiment = require('./apis/sentiment.js');\nconst sentimentBatch = require('./apis/sentimentBatch.js');\nconst target_sentiment = require('./apis/target_sentiment.js');\nconst target_sentimentBatch = require('./apis/target_sentimentBatch.js');\nconst sarcasm = require('./apis/sarcasm.js');\nconst sarcasmBatch = require('./apis/sarcasmBatch.js');\nconst abuse = require('./apis/abuse.js');\nconst abuseBatch = require('./apis/abuseBatch.js');\nconst semantic = require('./apis/semantic.js');\nconst ner = require('./apis/ner.js');\nconst nerBatch = require('./apis/nerBatch.js');\nconst emotion = require('./apis/emotion.js');\nconst emotionBatch = require('./apis/emotionBatch.js');\nconst intent = require('./apis/intent.js');\nconst intentBatch = require('./apis/intentBatch.js');\nconst keywords = require('./apis/keywords.js');\nconst keywordsBatch = require('./apis/keywordsBatch.js');\nconst mulitlangKeywords = require('./apis/multilangKeywords.js');\nconst taxonomy = require('./apis/taxonomy.js');\nconst taxonomyBatch = require('./apis/taxonomyBatch.js');\nconst multilingualSentiment = require('./apis/multilingualSentiment.js');\nconst customClassifier = require('./apis/customClassifier.js');\nconst textParser = require('./apis/textParser.js');\nconst phraseExtractor = require('./apis/phraseExtractor.js');\nconst phraseExtractorBatch = require('./apis/phraseExtractorBatch.js');\nconst languageDetection = require('./apis/languageDetection.js');\nconst languageDetectionBatch = require('./apis/languageDetectionBatch.js');\nconst popularity = require('./apis/popularity.js');\nconst nsfw = require('./apis/nsfw.js');\nconst facialEmotion = require('./apis/facialEmotion.js');\nconst objectRecognizer = require('./apis/objectRecognizer.js');\n\nlet paralleldots = {\n\t\n\tapiKey: undefined,\n\n\tusage: function(){\n\t\treturn usage(this.apiKey);\n\t},\n\n\tsentiment: function(text,lang_code='en'){\n\t\treturn sentiment(text,lang_code,this.apiKey);\n\t},\n\t\n\tsentimentBatch: function(text,lang_code='en'){\n\t\treturn sentimentBatch(text,lang_code,this.apiKey);\n\t},\n\n\ttarget_sentiment: function(text,entity){\n\t\treturn target_sentiment(text,this.apiKey,entity);\n\t},\n\ttarget_sentimentBatch: function(text,entity){\n\t\treturn target_sentimentBatch(text,this.apiKey,entity);\n\t},\n\tsarcasm: function(text,lang_code=\"en\"){\n\t\treturn sarcasm(text,lang_code,this.apiKey);\n\t},\n\tsarcasmBatch: function(text,lang_code=\"en\"){\n\t\treturn sarcasmBatch(text,lang_code,this.apiKey);\n\t},\n\tabuse: function(text){\n\t\treturn abuse(text,this.apiKey);\n\t},\n\n\tabuseBatch: function(text){\n\t\treturn abuseBatch(text,this.apiKey);\n\t},\n\n\tsemantic: function(text1,text2){\n\t\treturn semantic(text1,text2,this.apiKey)\n\t},\n\n\tner: function(text,lang_code=\"en\"){\n\t\treturn ner(text,lang_code,this.apiKey)\n\t},\n\n\tnerBatch: function(text,lang_code=\"en\"){\n\t\treturn nerBatch(text,lang_code,this.apiKey)\n\t},\n\n\temotion: function(text,lang_code=\"en\"){\n\t\treturn emotion(text,lang_code,this.apiKey)\n\t},\n\n\temotionBatch: function(text,lang_code=\"en\"){\n\t\treturn emotionBatch(text,lang_code,this.apiKey)\n\t},\n\n\tintent: function(text){\n\t\treturn intent(text,this.apiKey)\n\t},\n\t\n\tintentBatch: function(text){\n\t\treturn intentBatch(text,this.apiKey)\n\t},\n\n\tkeywords: function(text){\n\t\treturn keywords(text,this.apiKey)\n\t},\n\tkeywordsBatch: function(text){\n\t\treturn keywordsBatch(text,this.apiKey)\n\t},\n\n\n\tmultilangKeywords: function(text,lang_code=\"en\"){\n\t\treturn mulitlangKeywords(text,lang_code,this.apiKey)\n\t},\n\n\ttaxonomy: function(text){\n\t\treturn taxonomy(text,this.apiKey)\n\t},\n\n\ttaxonomyBatch: function(text){\n\t\treturn taxonomyBatch(text,this.apiKey)\n\t},\n\n\n\tmultilingualSentiment: function(text,code){\n\t\treturn multilingualSentiment(text,code,this.apiKey)\n\t},\n\n\tcustomClassifier:function(text,category){\n\t\treturn customClassifier(text,category,this.apiKey);\n\t},\n\n\ttextParser:function(text){\n\t\treturn textParser(text,this.apiKey);\n\t},\n\n\tphraseExtractor:function(text){\n\t\treturn phraseExtractor(text,this.apiKey);\n\t},\n\n\tphraseExtractorBatch:function(text){\n\t\treturn phraseExtractorBatch(text,this.apiKey);\n\t},\n\n\tlanguageDetection:function(text){\n\t\treturn languageDetection(text,this.apiKey);\n\t},\n\n\tlanguageDetectionBatch:function(text){\n\t\treturn languageDetectionBatch(text,this.apiKey);\n\t},\n\n\tpopularity:function(file_path,type){\n\t\treturn popularity(file_path,type,this.apiKey);\n\t},\n\n\tnsfw:function(file_path,type){\n\t\treturn nsfw(file_path,type,this.apiKey);\n\t},\n\n\tfacialEmotion:function(file_path,type){\n\t\treturn facialEmotion(file_path,type,this.apiKey);\n\t},\n\n\tobjectRecognizer:function(file_path,type){\n\t\treturn objectRecognizer(file_path,type,this.apiKey);\n\t}\n\n}\n\nmodule.exports = paralleldots;\n"]},"metadata":{},"sourceType":"script"}