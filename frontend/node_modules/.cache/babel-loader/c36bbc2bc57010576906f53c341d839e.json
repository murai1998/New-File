{"ast":null,"code":"var _jsxFileName = \"/Users/thatchampion/Desktop/Ironhack/Project4/frontend/src/components/Socket.js\";\nimport React, { useState, useEffect } from \"react\"; // import io from \"socket.io-client\";\n\nimport socketIOClient from \"socket.io-client\";\nimport Navbar from \"./navbar\";\nimport moment from \"moment\"; // import userGen from \"username-generator\";\n\nimport { Button, Input } from \"reactstrap\"; // const socket = io(\"http://localhost:4000\", {\n//   transports: [\"websocket\", \"polling\"]\n// });\n\nconst ENDPOINT = \"http://127.0.0.1:4000\";\nconst socket = socketIOClient(ENDPOINT);\n\nfunction Socket(props) {\n  var _user$usersList, _user$usersList2, _recMsg$listMsg;\n\n  const [user, setUser] = useState({\n    usersList: null\n  });\n  const [msg, setMsg] = useState(\"\");\n  const [recMsg, setRecMsg] = useState({\n    listMsg: []\n  });\n  const [loggedUser, setLoggedUser] = useState();\n  useEffect(() => {\n    // subscribe a new user\n    socket.emit(\"login\", props.user.user.username); // list of connected users\n\n    socket.on(\"users\", data => {\n      setUser({\n        usersList: JSON.parse(data)\n      });\n    }); // get the logged user\n\n    socket.on(\"connecteduser\", data => {\n      setLoggedUser(JSON.parse(data));\n    }); // we get the messages\n\n    socket.on(\"getMsg\", data => {\n      let listMessages = recMsg.listMsg;\n      listMessages.push(JSON.parse(data));\n      setRecMsg({\n        listMsg: listMessages\n      });\n    });\n  }, []);\n\n  const disconect = name => {\n    // e.preventDefault();\n    socket.emit(\"disconect\", name);\n    socket.disconnect();\n  }; // to send a message\n\n\n  const sendMessage = () => {\n    socket.emit(\"sendMsg\", JSON.stringify({\n      id: loggedUser.id,\n      msg: msg\n    }));\n    setMsg(\"\");\n    setMsg(\"\");\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Navbar, {\n    disconect: disconect,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tableNames \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, \" Active users: \", (_user$usersList = user.usersList) === null || _user$usersList === void 0 ? void 0 : _user$usersList.length, \" \"), /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table table-striped \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 15\n    }\n  }, \" User name \"), /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 15\n    }\n  }, \" Connection Date \"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, (_user$usersList2 = user.usersList) === null || _user$usersList2 === void 0 ? void 0 : _user$usersList2.map(user => {\n    return /*#__PURE__*/React.createElement(\"tr\", {\n      key: user.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 19\n      }\n    }, \" \", user.userName, \" \"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 19\n      }\n    }, \" \", user.connectionTime, \" \"));\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageChat2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"messageChat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    id: \"chatH\",\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \" \", loggedUser === null || loggedUser === void 0 ? void 0 : loggedUser.userName, \"`s CHAT\", \" \"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"chat\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 11\n    }\n  }, recMsg ? (_recMsg$listMsg = recMsg.listMsg) === null || _recMsg$listMsg === void 0 ? void 0 : _recMsg$listMsg.map((msgInfo, index) => {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: \"newCh\",\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 19\n      }\n    }, \" \", /*#__PURE__*/React.createElement(\"b\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }\n    }, msgInfo.userName, \" \"), \" : \", msgInfo.msg, \" \", /*#__PURE__*/React.createElement(\"small\", {\n      style: {\n        marginLeft: \"18px\",\n        color: \"blue\",\n        marginTop: \"5px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }\n    }, \" \", msgInfo.time, \" \"), \" \");\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 15\n    }\n  }, \" No new messages\"))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"messText\",\n    className: \"d-flex justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    style: {\n      display: \"inline\",\n      width: \"800px\",\n      height: \"80px\",\n      padding: \"10px\",\n      textAlign: \"left\",\n      width: \"100%\"\n    },\n    id: \"inputmsg\",\n    value: msg,\n    onChange: event => setMsg(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: \"btn\",\n    id: \"btnmsg\",\n    onClick: () => {\n      sendMessage();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, \" \", \"Send\", \" \"))));\n}\n\nexport default Socket;","map":{"version":3,"sources":["/Users/thatchampion/Desktop/Ironhack/Project4/frontend/src/components/Socket.js"],"names":["React","useState","useEffect","socketIOClient","Navbar","moment","Button","Input","ENDPOINT","socket","Socket","props","user","setUser","usersList","msg","setMsg","recMsg","setRecMsg","listMsg","loggedUser","setLoggedUser","emit","username","on","data","JSON","parse","listMessages","push","disconect","name","disconnect","sendMessage","stringify","id","length","map","userName","connectionTime","msgInfo","index","marginLeft","color","marginTop","time","display","width","height","padding","textAlign","event","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\n// import io from \"socket.io-client\";\nimport socketIOClient from \"socket.io-client\";\nimport Navbar from \"./navbar\";\n\nimport moment from \"moment\";\n// import userGen from \"username-generator\";\nimport { Button, Input } from \"reactstrap\";\n// const socket = io(\"http://localhost:4000\", {\n//   transports: [\"websocket\", \"polling\"]\n// });\nconst ENDPOINT = \"http://127.0.0.1:4000\";\nconst socket = socketIOClient(ENDPOINT);\nfunction Socket(props) {\n  const [user, setUser] = useState({\n    usersList: null\n  });\n  const [msg, setMsg] = useState(\"\");\n  const [recMsg, setRecMsg] = useState({\n    listMsg: []\n  });\n  const [loggedUser, setLoggedUser] = useState();\n\n  useEffect(() => {\n    // subscribe a new user\n\n    socket.emit(\"login\", props.user.user.username);\n    // list of connected users\n    socket.on(\"users\", data => {\n      setUser({ usersList: JSON.parse(data) });\n    });\n    // get the logged user\n    socket.on(\"connecteduser\", data => {\n      setLoggedUser(JSON.parse(data));\n    });\n\n    // we get the messages\n    socket.on(\"getMsg\", data => {\n      let listMessages = recMsg.listMsg;\n      listMessages.push(JSON.parse(data));\n      setRecMsg({ listMsg: listMessages });\n    });\n  }, []);\n  const disconect = name => {\n    // e.preventDefault();\n\n    socket.emit(\"disconect\", name);\n\n    socket.disconnect();\n  };\n  // to send a message\n  const sendMessage = () => {\n    socket.emit(\"sendMsg\", JSON.stringify({ id: loggedUser.id, msg: msg }));\n    setMsg(\"\");\n\n    setMsg(\"\");\n  };\n\n  return (\n    <div>\n      <Navbar disconect={disconect} />\n      <div className=\"tableNames \">\n        <h3> Active users: {user.usersList?.length} </h3>\n        <table className=\"table table-striped \">\n          <thead className=\"d-flex justify-content-center\">\n            <tr>\n              <th> User name </th>\n              <th> Connection Date </th>\n            </tr>\n          </thead>\n          <tbody className=\"d-flex justify-content-center\">\n            {user.usersList?.map(user => {\n              return (\n                <tr key={user.id}>\n                  <td> {user.userName} </td>\n                  <td> {user.connectionTime} </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      </div>\n      <div className=\"messageChat2\">\n        {/* <h3 className=\"d-flex justify-content-center\">\n          {\" \"}\n          Hi, ! Start a new conversation\n        </h3> */}\n        <div className=\"messageChat\">\n          <h3 id=\"chatH\" className=\"d-flex justify-content-center\">\n            {\" \"}\n            {loggedUser?.userName}`s CHAT{\" \"}\n          </h3>\n          <div id=\"chat\">\n            {recMsg ? (\n              recMsg.listMsg?.map((msgInfo, index) => {\n                return (\n                  <div id=\"newCh\" key={index}>\n                    {\" \"}\n                    <b>{msgInfo.userName} </b> : {msgInfo.msg}{\" \"}\n                    <small\n                      style={{\n                        marginLeft: \"18px\",\n                        color: \"blue\",\n                        marginTop: \"5px\"\n                      }}\n                    >\n                      {\" \"}\n                      {msgInfo.time}{\" \"}\n                    </small>{\" \"}\n                  </div>\n                );\n              })\n            ) : (\n              <div> No new messages</div>\n            )}\n          </div>\n        </div>\n        <div id=\"messText\" className=\"d-flex justify-content-center\">\n          <textarea\n            style={{\n              display: \"inline\",\n              width: \"800px\",\n              height: \"80px\",\n              padding: \"10px\",\n              textAlign: \"left\",\n              width: \"100%\"\n            }}\n            id=\"inputmsg\"\n            value={msg}\n            onChange={event => setMsg(event.target.value)}\n          />\n          <Button\n            className=\"btn\"\n            id=\"btnmsg\"\n            onClick={() => {\n              sendMessage();\n            }}\n          >\n            {\" \"}\n            Send{\" \"}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Socket;\n"]},"metadata":{},"sourceType":"module"}